include "baker.conf"

baas-component {

  http-api-port = 8080
  http-api-port = ${?BAAS_COMPONENT_HTTP_API_PORT}

  akka-cluster-selector = "akka-cluster"
  akka-cluster-selector = ${?STATE_CLUSTER_SELECTOR}

  recipe-directory = "/recipes"
  recipe-directory = ${?RECIPE_DIRECTORY}
}

akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "ERROR"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    jvm-exit-on-fatal-error = false
    log-config-on-start = off
}

baker {

  actor {
    provider = "cluster-sharded"
    idle-timeout = 1 minute
  }

  allow-adding-recipe-without-requiring-instances = true

  kafka-event-sink {
    enabled: true,
    enabled: ${?KAFKA_EVENT_SINK_ENABLED},
    bootstrap-servers: "kafka-event-sink:9092",
    bootstrap-servers: ${?KAFKA_EVENT_SINK_BOOTSTRAP_SERVERS},
    baker-events-topic: "baker-events",
    baker-events-topic: ${?KAFKA_EVENT_SINK_BAKER_EVENTS_TOPIC},
    recipe-events-topic: "recipe-events"
    recipe-events-topic: ${?KAFKA_EVENT_SINK_RECIPE_EVENTS_TOPIC},
  }


}


akka.http.host-connection-pool.idle-timeout = 21474835s

skuber {

  akka {
    # The ID of the dispatcher to use by Skuber. If undefined or empty the default Akka dispatcher is used.
    dispatcher = ""
  }

  watch {
    # The idle timeout duration for any connections used by skuber `watch` requests - if null the timeout is infinite.
    idle-timeout = null
  }

  pod-log {
    # The idle timeout duration for any connections used by skuber `pod log` requests - if null the timeout is infinite.
    idle-timeout = null
  }

  watch-continuously {
    # Timeout that is passed to the kubernetes cluster for all list/watch calls. This limits the duration of the call,
    # regardless of any activity or inactivity.
    request-timeout = 21474834s

    # The idle timeout for the connection before if closes due to inactivity. The idle-timeout must be a great value
    # than that used for timeout-seconds.
    idle-timeout = 21474835s

    # The idle timeout for the connection pool used by the Watch Source (each source has its own connection pool).
    # When the pool is no longer used by the source and the idle time has been exceeded the pool will shutdown and
    # reclaim the unused resources.
    pool-idle-timeout = 21474835s

  }
}


#cassandra-journal.contact-points.0 = "127.0.0.1"
#cassandra-journal.contact-points.0 = ${?CASSANDRA_CONTACT_POINTS_0}

#cassandra-snapshot-store.contact-points.0 = "127.0.0.1"
#cassandra-snapshot-store.contact-points.0 = ${?CASSANDRA_CONTACT_POINTS_0}

#akka.actor.allow-java-serialization = on

akka {

  actor {
    provider = "cluster"
  }

  cluster {

    roles = ["state-node"]

    min-nr-of-members = 1

    configuration-compatibility-check.enforce-on-join = off
  }

  #persistence {
  # See https://doc.akka.io/docs/akka-persistence-cassandra/current/journal.html#configuration
  #journal.plugin = "cassandra-journal"
  # See https://doc.akka.io/docs/akka-persistence-cassandra/current/snapshots.html#configuration
  #snapshot-store.plugin = "cassandra-snapshot-store"
  #}

  discovery {
    kubernetes-api {
      pod-label-selector = "akka-cluster=%s"
    }
  }

  management {

    http.routes {
      cluster-management = ""
    }

    cluster.bootstrap {
      contact-point-discovery {
        # For the kubernetes API this value is substituted into the %s in pod-label-selector
        service-name = ${baas-component.akka-cluster-selector}

        # pick the discovery method you'd like to use:
        discovery-method = kubernetes-api

        required-contact-point-nr = 1
      }
    }

    health-checks {
      readiness-path = "health/ready"
      liveness-path = "health/alive"

      liveness-checks {
        cluster-health = "com.ing.baker.baas.state.ClusterHealthCheck"
      }
    }
  }
}

kamon.instrumentation.akka.filters {

  actors.track {
    includes = [ "BaaSStateNodeSystem/user/ProcessIndexActor", "BaaSStateNodeSystem/user/RecipeManager" ]
    excludes = [ "BaaSStateNodeSystem/system/**" ]
  }

  dispatchers {
    includes = [ "BaaSStateNodeSystem/akka.actor.default-dispatcher" ]
  }

  routers {
    includes = [ ]
  }
}
