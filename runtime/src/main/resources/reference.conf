baker {

  actor {
    # the id of the journal to read events from
    read-journal-plugin = "inmemory-read-journal"

    # either "local" or "cluster-sharded"
    provider = "local"

    # the recommended nr is number-of-cluster-nodes * 10
    cluster.nr-of-shards = 50

    # the time that inactive actors (processes) stay in memory
    idle-timeout = 5 minutes
  }

  # This config enables/disables the akka distributed data usage for the Baker.allProcessIds call
  # If disabled and Cluster is used, then Baker.allProcessIds returns always an empty set
  # If enabled and Cluster is used, then Baker.allProcessIds uses akka ddata to retrieve this shared recipe metadata info
  # This config is discarded if local actor system is used, then Baker.allProcessIds returns always the processIds in that local node
  distributed-process-metadata-enabled = false

  # the default timeout for Baker.bake(..) process creation calls
  bake-timeout = 10 seconds

  # when baker starts up, it attempts to 'initialize' the journal connection, this may take some time
  journal-initialize-timeout = 30 seconds

  # encryption settings
  encryption {

    # whether to encrypt data stored in the journal, off or on
    enabled = off

    # if enabled = on, a secret should be set
    # secret = ???
  }



  # baker accepts any Object as an event, these objects are converted to RuntimeEvent instances by event extractors.
  # they are configured similar to akka serialization bindings
  event-extractors {
    "pojo-extractor" = "com.ing.baker.runtime.event_extractors.PojoEventExtractor"
    "map-extractor" = "com.ing.baker.runtime.event_extractors.MapEventExtractor"
  }

  event-extractor-bindings {
    "java.lang.Object" = "pojo-extractor"
    "scala.collection.immutable.Map" = "map-extractor"
  }

  # these should not be set/changed by library users
  scalapb {
    serialization-manifests {
      "TransitionFired" = "com.ing.baker.runtime.actor.messages.TransitionFired"
      "TransitionFailed" = "com.ing.baker.runtime.actor.messages.TransitionFailed"
      "Initialized" = "com.ing.baker.runtime.actor.messages.Initialized"
    }
  }
}

akka {

  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }

  actor {
    serializers {
      kryo = "com.ing.baker.runtime.actor.serialization.KryoSerializer"
      baker-protobuf = "com.ing.baker.runtime.actor.serialization.BakerProtobufSerializer"
      baker-scalapb = "com.ing.baker.runtime.actor.serialization.ScalaPBSerializer"
    }

    serialization-bindings {

      "com.ing.baker.runtime.actor.messages.TransitionFired" = baker-scalapb
      "com.ing.baker.runtime.actor.messages.TransitionFailed" = baker-scalapb
      "com.ing.baker.runtime.actor.messages.Initialized" = baker-scalapb

      // map baker petrinet internal classes to use kryo serialization
      "com.ing.baker.petrinet.runtime.EventSourcing$TransitionFiredEvent" = kryo
      "com.ing.baker.petrinet.runtime.EventSourcing$TransitionFailedEvent" = kryo
      "com.ing.baker.petrinet.runtime.EventSourcing$InitializedEvent" = kryo
      "com.ing.baker.runtime.actor.ProcessInstanceEvent" = kryo
      "com.ing.baker.types.Value" = kryo

      // map baker internal classes to use kryo serialization
      "com.ing.baker.runtime.actor.InternalBakerEvent" = kryo
      "com.ing.baker.runtime.actor.InternalBakerMessage" = kryo
      "com.ing.baker.runtime.actor.ProcessMetadata" = kryo
      "com.ing.baker.runtime.actor.ProcessInstance$IdleStop" = kryo

      "com.ing.baker.runtime.core.RuntimeEvent" = baker-protobuf
      "com.ing.baker.runtime.core.ProcessState" = baker-protobuf

      // manually map jodatime classes to use kryo serialization
      "org.joda.time.DateTime" = kryo
      "org.joda.time.LocalDate" = kryo
      "org.joda.time.LocalDateTime" = kryo
      "java.math.BigDecimal" = kryo
    }
  }
}
