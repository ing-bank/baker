baker {

  actor {
    # the id of the journal to read events from
    read-journal-plugin = "inmemory-read-journal"

    # either "local" or "cluster-sharded"
    provider = "local"

    # the recommended nr is number-of-cluster-nodes * 10
    cluster.nr-of-shards = 50

    # the time that inactive actors (processes) stay in memory
    idle-timeout = 5 minutes

    # The interval that a check is done of processes should be deleted
    retention-check-interval = 1 minutes
  }

  # the default timeout for Baker.bake(..) process creation calls
  bake-timeout = 10 seconds

  # the timeout for refreshing the local recipe cache
  process-index-update-cache-timeout = 5 seconds

  # the default timeout for Baker.processEvent(..)
  process-event-timeout = 10 seconds

  # the default timeout for inquires on Baker, this means getIngredients(..) & getEvents(..)
  process-inquire-timeout = 10 seconds

  # when baker starts up, it attempts to 'initialize' the journal connection, this may take some time
  journal-initialize-timeout = 30 seconds

  # the default timeout for adding a recipe to Baker
  add-recipe-timeout = 10 seconds

  # the time to wait for a gracefull shutdown
  shutdown-timeout = 30 seconds

  # encryption settings
  encryption {

    # whether to encrypt data stored in the journal, off or on
    enabled = off

    # if enabled = on, a secret should be set
    # secret = ???
  }
}

akka {

  # by default we use the in memory journal from: https://github.com/dnvriend/akka-persistence-inmemory
  persistence.journal.plugin = "inmemory-journal"
  persistence.snapshot-store.plugin = "inmemory-snapshot-store"

  actor {
    serializers {

      // In Baker 1.3.x Kryo was used for serialization of ingredients
      // It is kept to be able to de-serialize that data
      baker-kryo = "com.ing.baker.runtime.actor.serialization.KryoSerializer"

      // In Baker 1.3.x this serializer was used for ProcessInstance events
      // It is kept to be able to de-serialize that data
      baker-scalapb = "com.ing.baker.runtime.actor.serialization.ScalaPBSerializer"

      // This is the only serializer that is actively used to serialize new messages
      baker-protobuf = "com.ing.baker.runtime.actor.serialization.BakerProtobufSerializer"
    }

    serialization-bindings {

      // map baker classes to use protobuf serialization
      "com.ing.baker.runtime.actor.serialization.BakerProtoMessage" = baker-protobuf

      // TODO what to do with these bindings, should they instead extend from BakerProtoMessage ?
      "com.ing.baker.types.Value" = baker-protobuf
      "com.ing.baker.types.Type" = baker-protobuf
      "com.ing.baker.runtime.core.RuntimeEvent" = baker-protobuf
      "com.ing.baker.runtime.core.ProcessState" = baker-protobuf
    }
  }
}
