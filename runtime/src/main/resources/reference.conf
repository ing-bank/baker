baker {

  actor {
    # the id of the journal to read events from
    read-journal-plugin = "inmemory-read-journal"

    # either "local" or "cluster-sharded"
    provider = "local"

    # the recommended nr is number-of-cluster-nodes * 10
    cluster.nr-of-shards = 50

    # the time that inactive actors (processes) stay in memory
    idle-timeout = 5 minutes

    # The interval that a check is done of processes should be deleted
    retention-check-interval = 1 minutes
  }

  # the default timeout for Baker.bake(..) process creation calls
  bake-timeout = 10 seconds

  # the default timeout for Baker.processEvent(..)
  process-event-timeout = 10 seconds

  # the default timeout for inquires on Baker, this means getIngredients(..) & getEvents(..)
  process-inquire-timeout = 10 seconds

  # when baker starts up, it attempts to 'initialize' the journal connection, this may take some time
  journal-initialize-timeout = 30 seconds

  # the default timeout for adding a recipe to Baker
  add-recipe-timeout = 10 seconds

  # the time to wait for a gracefull shutdown
  shutdown-timeout = 30 seconds

  # encryption settings
  encryption {

    # whether to encrypt data stored in the journal, off or on
    enabled = off

    # if enabled = on, a secret should be set
    # secret = ???
  }



  # baker accepts any Object as an event, these objects are converted to RuntimeEvent instances by event extractors.
  # they are configured similar to akka serialization bindings
  event-extractors {
    "pojo-extractor" = "com.ing.baker.runtime.event_extractors.PojoEventExtractor"
    "map-extractor" = "com.ing.baker.runtime.event_extractors.MapEventExtractor"
  }

  event-extractor-bindings {
    "java.lang.Object" = "pojo-extractor"
    "scala.collection.immutable.Map" = "map-extractor"
  }

  # these should not be set/changed by library users
  scalapb {
    serialization-manifests {
      "TransitionFired"  = "com.ing.baker.runtime.actor.process_instance.protobuf.TransitionFired"
      "TransitionFailed" = "com.ing.baker.runtime.actor.process_instance.protobuf.TransitionFailed"
      "Initialized"      = "com.ing.baker.runtime.actor.process_instance.protobuf.Initialized"
    }
  }
}

akka {

  # by default we use the in memory journal from: https://github.com/dnvriend/akka-persistence-inmemory
  persistence.journal.plugin = "inmemory-journal"
  persistence.snapshot-store.plugin = "inmemory-snapshot-store"

  actor {
    serializers {
      kryo = "com.ing.baker.runtime.actor.serialization.KryoSerializer"
      baker-protobuf = "com.ing.baker.runtime.actor.serialization.BakerProtobufSerializer"
      baker-scalapb = "com.ing.baker.runtime.actor.serialization.ScalaPBSerializer"
    }

    serialization-bindings {

      "com.ing.baker.runtime.actor.process_instance.protobuf.TransitionFired" = baker-scalapb
      "com.ing.baker.runtime.actor.process_instance.protobuf.TransitionFailed" = baker-scalapb
      "com.ing.baker.runtime.actor.process_instance.protobuf.Initialized" = baker-scalapb

      // the kryo mapped classes are all GARUANTEED local, they exist only to satisfy the akka framework
      "com.ing.baker.runtime.actor.InternalBakerMessage" = kryo

      "com.ing.baker.petrinet.runtime.EventSourcing$TransitionFiredEvent" = kryo
      "com.ing.baker.petrinet.runtime.EventSourcing$TransitionFailedEvent" = kryo
      "com.ing.baker.petrinet.runtime.EventSourcing$InitializedEvent" = kryo
      "com.ing.baker.runtime.actor.process_instance.ProcessInstanceEvent" = kryo

      // map baker internal classes to use kryo serialization
      "com.ing.baker.runtime.actor.BakerProtoMessage" = baker-protobuf

      // TODO what to do with these bindings, should they instead extend from BakerProtoMessage ?
      "com.ing.baker.types.Value" = baker-protobuf
      "com.ing.baker.types.Type" = baker-protobuf
      "com.ing.baker.runtime.core.RuntimeEvent" = baker-protobuf
      "com.ing.baker.runtime.core.ProcessState" = baker-protobuf
    }
  }
}
