include "baker.conf"

baker {

  api-port = 8080
  api-port = ${?API_PORT}

  api-url-prefix = "/api/bakery"

  api-logging-enabled = false
  api-logging-enabled = ${?API_LOGGING_ENABLED}

  metrics-port = 9095
  metrics-port = ${?METRICS_PORT}

  akka-cluster-selector = "akka-cluster"
  akka-cluster-selector = ${?STATE_CLUSTER_SELECTOR}

  interaction-configuration-classes = []

  actor {
    provider = "cluster-sharded"
    idle-timeout = 1 minute
  }

  allow-adding-recipe-without-requiring-instances = true

  kafka-event-sink {
    enabled: false,
    bootstrap-servers: "",
    baker-events-topic: "baker-events",
    recipe-events-topic: "recipe-events"
  }

}

akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  jvm-exit-on-fatal-error = false
  log-config-on-start = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  cluster {
    roles = ["state-node"]
    min-nr-of-members = 1
    configuration-compatibility-check.enforce-on-join = off
    sharding.remember-entities = on
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    metrics {
      collector {
        enabled = on
        fallback = true
        sample-interval = 3s
        gossip-interval = 3s
        moving-average-half-life = 12s
      }
    }
  }

  discovery {
    kubernetes-api {
      pod-label-selector = "akka-cluster=%s"
    }
  }

  extensions = [akka.persistence.Persistence]

  management {

    cluster.bootstrap {
      contact-point-discovery {
        # For the kubernetes API this value is substituted into the %s in pod-label-selector
        service-name = ${baker.akka-cluster-selector}

        # pick the discovery method you'd like to use:
        discovery-method = kubernetes-api

        required-contact-point-nr = 1
      }
    }
    health-checks {
      readiness-path = "health/ready"
      liveness-path = "health/alive"
      liveness-checks {
        cluster-health = "com.ing.bakery.baker.ClusterHealthCheck"
      }
      readiness-checks {
        name = "com.ing.bakery.baker.BakerReadinessCheck"
      }
    }
  }
  persistence {

    max-concurrent-recoveries = 10
    snapshot-store.plugin = ""

    journal {
      plugin = "akka.persistence.cassandra.journal"
      auto-start-journals = ["akka.persistence.cassandra.journal"]
    }

    cassandra {

      # The ExecutionContext to use for the session tasks and future composition.
      session-dispatcher = "akka.persistence.cassandra.default-dispatcher"
      datastax-java-driver-config = "datastax-java-driver"

      read-profile = "akka-persistence-cassandra-profile"
      write-profile = "akka-persistence-cassandra-profile"

      meta-in-events-by-tag-view = off

      coordinated-shutdown-on-error = off

      journal {

        class = "akka.persistence.cassandra.journal.CassandraJournal"
        plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"

        keyspace-autocreate = false
        tables-autocreate = false

        keyspace = "akka"
        table = "messages"

        table-compaction-strategy {
          class = "SizeTieredCompactionStrategy"
        }

        metadata-table = "metadata"

        replication-strategy = "SimpleStrategy"
        support-all-persistence-ids = off

      }

      events-by-tag {
        enabled = false
        pubsub-notification = off
      }

      healthcheck {
        plugin-location = "akka.persistence.cassandra"
        timeout = 5s
        health-check-cql = "SELECT now() FROM system.local"
      }

      # Default dispatcher for plugin actor and tasks.
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 6
          parallelism-factor = 1
          parallelism-max = 6
        }
      }
    }
  }
}

datastax-java-driver {
  advanced.metrics {
    session.enabled = [ connected-nodes, cql-requests,  bytes-sent, bytes-received,  cql-client-timeouts  ]
  }
  profiles {
    akka-persistence-cassandra-profile {
      basic.request {
        consistency = LOCAL_QUORUM
        default-idempotence = true  # the journal does not use any counters or collections
      }
    }
  }
}

kamon {
  prometheus.start-embedded-http-server = no
  system-metrics {
    sigar-enabled = false
    jmx-enabled = false
  }
  modules {
    prometheus-reporter.enabled = no
    status-page.enabled = no
    host-metrics.enabled = no
    process-metrics.enabled = no
    jvm-metrics.enabled = no
  }

  instrumentation {
    http-server.default.metrics.enabled = no
    akka {
      http {
        client {
          propagation.enabled = no
          tracing.enabled = no
        }
        server {
          propagation.enabled = no
          tracing.enabled = no
        }
      }
      filters {
        actors.track {
          includes = ["baker/user/ProcessIndexActor", "baker/user/RecipeManager"]
          excludes = ["baker/system/**"]
        }
        dispatchers {
          includes = ["baker/akka.actor.default-dispatcher"]
        }
        routers {
          includes = []
        }
      }
    }
  }
}

bakery-cassandra-session-provider {
  profile = "akka-persistence-cassandra-profile"
}
