include "baker.conf"

baker {
  watcher {
    class = ""
  }

  production-safe-mode = off
  encryption.enabled = off
  metrics-port = 9095

  api-port = 8080
  api-url-prefix = "/api/bakery"
  api-logging-enabled = false

  bake-timeout = 30 seconds
  add-recipe-timeout = 30 seconds
  journal-initialize-timeout = 30 seconds
  allow-adding-recipe-without-requiring-instances = true

  recipe-poll-interval = 1 minute
  recipe-poll-interval = ${?RECIPE_POLL_INTERVAL}

  interactions {
    local-configuration-classes = []
    localhost-ports = []
    pod-label-selector = ""
  }

  actor {
    provider = "cluster-sharded"
    idle-timeout = 1 minute
    retention-check-interval = 1 hour
  }

  event-sink {
    provider-class: ""
  }

}

akka {

  remote {
    artery {
      advanced {
        maximum-frame-size = 1M
        buffer-pool-size = 128
      }
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  jvm-exit-on-fatal-error = true
  log-config-on-start = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    default-dispatcher {
      type = "akka.sensors.dispatch.InstrumentedDispatcherConfigurator"
      executor = "akka.sensors.dispatch.InstrumentedExecutor"

      instrumented-executor {
        delegate = "fork-join-executor"
        measure-runs = true
        watch-long-runs = false
      }
    }

    remote-interaction-dispatcher {
      type = "akka.sensors.dispatch.InstrumentedDispatcherConfigurator"
      executor = "akka.sensors.dispatch.InstrumentedExecutor"

      instrumented-executor {
        delegate = "fork-join-executor"
        measure-runs = true
        watch-long-runs = false
      }

      fork-join-executor {
        parallelism-min = 6
        parallelism-factor = 1
        parallelism-max = 6
      }
    }
  }

  cluster {
    roles = ["state-node"]
    min-nr-of-members = 1
    configuration-compatibility-check.enforce-on-join = off

    sharding {
      least-shard-allocation-strategy.rebalance-threshold = 5
      remember-entities = on
      remember-entities-store = eventsourced
    }
    shutdown-after-unsuccessful-join-seed-nodes = 5m
    akka.remote.use-passive-connections = off

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    split-brain-resolver {
      active-strategy = keep-majority
      stable-after = 20s
      down-all-when-unstable = on
    }
  }

  discovery {
    kubernetes-api {
      pod-label-selector = "akka-cluster=%s"
    }
  }

  extensions = [akka.persistence.Persistence, akka.sensors.AkkaSensors]

  management {
    cluster.bootstrap {
      contact-point-discovery {
        service-name = "bakery"
        discovery-method = kubernetes-api
        required-contact-point-nr = 1
      }
    }
    health-checks {
      readiness-path = "health/ready"
      liveness-path = "health/alive"
      liveness-checks {
        cluster-health = "akka.sensors.ClusterHealthCheck"
        name = "com.ing.bakery.baker.WatcherReadinessCheck"
      }
      readiness-checks {
        name = "com.ing.bakery.baker.BakerReadinessCheck"
      }
    }
  }
}

